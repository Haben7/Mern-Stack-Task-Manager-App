{"ast":null,"code":"import React,{useEffect}from'react';import{BrowserRouter as Router,Routes,Route,useNavigate}from'react-router-dom';import{useDispatch,useSelector}from\"react-redux\";import{authActions}from'./store/authSlice';import Home from'./components/home';import Important from'./components/important';import Trash from'./components/Trash';import Incompleted from'./components/incompleted';import Completed from'./components/completed';import SignUp from'./components/signUp';import SignIn from'./components/signIn';import UpdateProfile from'./components/updateProfile';// Ensure this component exists\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function App(){const navigate=useNavigate();// Ensure this is correctly imported\nconst isLoggedIn=useSelector(state=>state.auth.isLoggedIn);const dispatch=useDispatch();/* React.useEffect(() => {\n    const userId = localStorage.getItem(\"id\");\n    const token = localStorage.getItem(\"token\");\n    if (userId && token) {\n      dispatch(authActions.login());\n      navigate(\"/\"); // Redirect to home if logged in\n    } else {\n      navigate(\"/signUp\"); // Redirect to sign-in if not logged in\n    }\n  }, [dispatch, navigate]);\n  \n  \n  // Ensure navigation only happens if not logged in\n  React.useEffect(() => {\n    if (isLoggedIn) {\n      navigate(\"/\");\n    }\n  }, [isLoggedIn, navigate]);*/// useEffect(()=> {\n//   if(localStorage.getItem(\"id\") && localStorage.getItem(\"token\")){\n//     dispatch(authActions.login());\n//   } else if(isLoggedIn === false){\n//     navigate(\"/signUp\");}\n//   },[]);\nreturn/*#__PURE__*/_jsxs(Routes,{children:[/*#__PURE__*/_jsx(Route,{path:\"/\",element:/*#__PURE__*/_jsx(SignUp,{})}),/*#__PURE__*/_jsx(Route,{path:\"/important\",element:/*#__PURE__*/_jsx(Important,{})}),/*#__PURE__*/_jsx(Route,{path:\"/home\",element:/*#__PURE__*/_jsx(Home,{})}),/*#__PURE__*/_jsx(Route,{path:\"/completed\",element:/*#__PURE__*/_jsx(Completed,{})}),/*#__PURE__*/_jsx(Route,{path:\"/incompleted\",element:/*#__PURE__*/_jsx(Incompleted,{})}),/*#__PURE__*/_jsx(Route,{path:\"/Trash\",element:/*#__PURE__*/_jsx(Trash,{})}),/*#__PURE__*/_jsx(Route,{path:\"/signUp\",element:/*#__PURE__*/_jsx(SignUp,{})}),/*#__PURE__*/_jsx(Route,{path:\"/signIn\",element:/*#__PURE__*/_jsx(SignIn,{})}),/*#__PURE__*/_jsx(Route,{path:\"/updateProfile\",element:/*#__PURE__*/_jsx(UpdateProfile,{})})]});}export default App;","map":{"version":3,"names":["React","useEffect","BrowserRouter","Router","Routes","Route","useNavigate","useDispatch","useSelector","authActions","Home","Important","Trash","Incompleted","Completed","SignUp","SignIn","UpdateProfile","jsx","_jsx","jsxs","_jsxs","App","navigate","isLoggedIn","state","auth","dispatch","children","path","element"],"sources":["/home/netsi/omishtu_joy/Day_4/taskify/frontend/src/App.js"],"sourcesContent":["import React, { useEffect } from 'react';\nimport { BrowserRouter as Router, Routes, Route, useNavigate } from 'react-router-dom';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { authActions } from './store/authSlice';\nimport Home from './components/home';\nimport Important from './components/important';\nimport Trash from './components/Trash';\nimport Incompleted from './components/incompleted';\nimport Completed from './components/completed';\nimport SignUp from './components/signUp';\nimport SignIn from './components/signIn';\nimport UpdateProfile from './components/updateProfile'; // Ensure this component exists\n\n\n\nfunction App() {\n  const navigate = useNavigate(); // Ensure this is correctly imported\n  const isLoggedIn = useSelector((state) => state.auth.isLoggedIn);\n  const dispatch = useDispatch();\n\n /* React.useEffect(() => {\n    const userId = localStorage.getItem(\"id\");\n    const token = localStorage.getItem(\"token\");\n    if (userId && token) {\n      dispatch(authActions.login());\n      navigate(\"/\"); // Redirect to home if logged in\n    } else {\n      navigate(\"/signUp\"); // Redirect to sign-in if not logged in\n    }\n  }, [dispatch, navigate]);\n  \n  \n  // Ensure navigation only happens if not logged in\n  React.useEffect(() => {\n    if (isLoggedIn) {\n      navigate(\"/\");\n    }\n  }, [isLoggedIn, navigate]);*/\n  \n// useEffect(()=> {\n//   if(localStorage.getItem(\"id\") && localStorage.getItem(\"token\")){\n//     dispatch(authActions.login());\n//   } else if(isLoggedIn === false){\n//     navigate(\"/signUp\");}\n//   },[]);\n\n  return (\n    <Routes>\n      <Route path=\"/\" element={<SignUp />} />\n      <Route path=\"/important\" element={<Important />} />\n      <Route path=\"/home\" element={<Home />} />\n      <Route path=\"/completed\" element={<Completed />} />\n      <Route path=\"/incompleted\" element={<Incompleted />} />\n      <Route path=\"/Trash\" element={<Trash />} />\n      <Route path=\"/signUp\" element={<SignUp />} />\n      <Route path=\"/signIn\" element={<SignIn />} />\n      <Route path=\"/updateProfile\" element={<UpdateProfile />} />\n\n    </Routes>\n  );\n}\n\nexport default App;\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,SAAS,KAAQ,OAAO,CACxC,OAASC,aAAa,GAAI,CAAAC,MAAM,CAAEC,MAAM,CAAEC,KAAK,CAAEC,WAAW,KAAQ,kBAAkB,CACtF,OAASC,WAAW,CAAEC,WAAW,KAAQ,aAAa,CACtD,OAASC,WAAW,KAAQ,mBAAmB,CAC/C,MAAO,CAAAC,IAAI,KAAM,mBAAmB,CACpC,MAAO,CAAAC,SAAS,KAAM,wBAAwB,CAC9C,MAAO,CAAAC,KAAK,KAAM,oBAAoB,CACtC,MAAO,CAAAC,WAAW,KAAM,0BAA0B,CAClD,MAAO,CAAAC,SAAS,KAAM,wBAAwB,CAC9C,MAAO,CAAAC,MAAM,KAAM,qBAAqB,CACxC,MAAO,CAAAC,MAAM,KAAM,qBAAqB,CACxC,MAAO,CAAAC,aAAa,KAAM,4BAA4B,CAAE;AAAA,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAIxD,QAAS,CAAAC,GAAGA,CAAA,CAAG,CACb,KAAM,CAAAC,QAAQ,CAAGjB,WAAW,CAAC,CAAC,CAAE;AAChC,KAAM,CAAAkB,UAAU,CAAGhB,WAAW,CAAEiB,KAAK,EAAKA,KAAK,CAACC,IAAI,CAACF,UAAU,CAAC,CAChE,KAAM,CAAAG,QAAQ,CAAGpB,WAAW,CAAC,CAAC,CAE/B;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAEA;AACA;AACA;AACA;AACA;AACA;AAEE,mBACEc,KAAA,CAACjB,MAAM,EAAAwB,QAAA,eACLT,IAAA,CAACd,KAAK,EAACwB,IAAI,CAAC,GAAG,CAACC,OAAO,cAAEX,IAAA,CAACJ,MAAM,GAAE,CAAE,CAAE,CAAC,cACvCI,IAAA,CAACd,KAAK,EAACwB,IAAI,CAAC,YAAY,CAACC,OAAO,cAAEX,IAAA,CAACR,SAAS,GAAE,CAAE,CAAE,CAAC,cACnDQ,IAAA,CAACd,KAAK,EAACwB,IAAI,CAAC,OAAO,CAACC,OAAO,cAAEX,IAAA,CAACT,IAAI,GAAE,CAAE,CAAE,CAAC,cACzCS,IAAA,CAACd,KAAK,EAACwB,IAAI,CAAC,YAAY,CAACC,OAAO,cAAEX,IAAA,CAACL,SAAS,GAAE,CAAE,CAAE,CAAC,cACnDK,IAAA,CAACd,KAAK,EAACwB,IAAI,CAAC,cAAc,CAACC,OAAO,cAAEX,IAAA,CAACN,WAAW,GAAE,CAAE,CAAE,CAAC,cACvDM,IAAA,CAACd,KAAK,EAACwB,IAAI,CAAC,QAAQ,CAACC,OAAO,cAAEX,IAAA,CAACP,KAAK,GAAE,CAAE,CAAE,CAAC,cAC3CO,IAAA,CAACd,KAAK,EAACwB,IAAI,CAAC,SAAS,CAACC,OAAO,cAAEX,IAAA,CAACJ,MAAM,GAAE,CAAE,CAAE,CAAC,cAC7CI,IAAA,CAACd,KAAK,EAACwB,IAAI,CAAC,SAAS,CAACC,OAAO,cAAEX,IAAA,CAACH,MAAM,GAAE,CAAE,CAAE,CAAC,cAC7CG,IAAA,CAACd,KAAK,EAACwB,IAAI,CAAC,gBAAgB,CAACC,OAAO,cAAEX,IAAA,CAACF,aAAa,GAAE,CAAE,CAAE,CAAC,EAErD,CAAC,CAEb,CAEA,cAAe,CAAAK,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}