{"ast":null,"code":"var _jsxFileName = \"/home/netsi/omishtu_joy/Day_4/taskify/frontend/src/components/completed.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Task from './task';\nimport InputData from './inputData';\nimport './tasklist.css';\nimport Header from \"./header\";\nimport Sidebar from \"./sidebar\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Completed() {\n  _s();\n  const [tasks, setTasks] = useState([]);\n  useEffect(() => {\n    fetchTasks();\n  }, []);\n  const fetchTasks = async () => {\n    try {\n      const userId = localStorage.getItem('id');\n      const token = localStorage.getItem('token');\n      const response = await fetch('http://localhost:4000/api/v2/update-complete-task', {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'id': userId\n        }\n      });\n      if (response.ok) {\n        const data = await response.json();\n        setTasks(data.data);\n      } else {\n        console.error('Failed to fetch completed tasks');\n      }\n    } catch (error) {\n      console.error('Error fetching completed tasks:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"completed-tasks\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Sidebar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"task-list\",\n      children: tasks.map(task => /*#__PURE__*/_jsxDEV(Task, {\n        task: task,\n        onUpdate: fetchTasks\n      }, task._id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n}\n_s(Completed, \"bBd6yqkqV9dlkj9ENgRyXKaiXpk=\");\n_c = Completed;\nexport default Completed;\nvar _c;\n$RefreshReg$(_c, \"Completed\");","map":{"version":3,"names":["React","useState","useEffect","Task","InputData","Header","Sidebar","jsxDEV","_jsxDEV","Completed","_s","tasks","setTasks","fetchTasks","userId","localStorage","getItem","token","response","fetch","method","headers","ok","data","json","console","error","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","task","onUpdate","_id","_c","$RefreshReg$"],"sources":["/home/netsi/omishtu_joy/Day_4/taskify/frontend/src/components/completed.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Task from './task';\nimport InputData from './inputData';\nimport './tasklist.css';\nimport Header from \"./header\";\nimport Sidebar from \"./sidebar\";\n\nfunction Completed() {\n  const [tasks, setTasks] = useState([]);\n\n  useEffect(() => {\n    fetchTasks();\n  }, []);\n\n  const fetchTasks = async () => {\n    try {\n      const userId = localStorage.getItem('id');\n      const token = localStorage.getItem('token');\n\n      const response = await fetch('http://localhost:4000/api/v2/update-complete-task', {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'id': userId,\n        },\n      });\n\n      if (response.ok) {\n        const data = await response.json();\n        setTasks(data.data);\n      } else {\n        console.error('Failed to fetch completed tasks');\n      }\n    } catch (error) {\n      console.error('Error fetching completed tasks:', error);\n    }\n  };\n\n  return (\n    <div className=\"completed-tasks\">\n      <Header />\n      <Sidebar />\n      <div className=\"task-list\">\n        {tasks.map(task => (\n          <Task key={task._id} task={task} onUpdate={fetchTasks} />\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default Completed;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,IAAI,MAAM,QAAQ;AACzB,OAAOC,SAAS,MAAM,aAAa;AACnC,OAAO,gBAAgB;AACvB,OAAOC,MAAM,MAAM,UAAU;AAC7B,OAAOC,OAAO,MAAM,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhC,SAASC,SAASA,CAAA,EAAG;EAAAC,EAAA;EACnB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAEtCC,SAAS,CAAC,MAAM;IACdW,UAAU,CAAC,CAAC;EACd,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMA,UAAU,GAAG,MAAAA,CAAA,KAAY;IAC7B,IAAI;MACF,MAAMC,MAAM,GAAGC,YAAY,CAACC,OAAO,CAAC,IAAI,CAAC;MACzC,MAAMC,KAAK,GAAGF,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;MAE3C,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAAC,mDAAmD,EAAE;QAChFC,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE;UACP,eAAe,EAAE,UAAUJ,KAAK,EAAE;UAClC,IAAI,EAAEH;QACR;MACF,CAAC,CAAC;MAEF,IAAII,QAAQ,CAACI,EAAE,EAAE;QACf,MAAMC,IAAI,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;QAClCZ,QAAQ,CAACW,IAAI,CAACA,IAAI,CAAC;MACrB,CAAC,MAAM;QACLE,OAAO,CAACC,KAAK,CAAC,iCAAiC,CAAC;MAClD;IACF,CAAC,CAAC,OAAOA,KAAK,EAAE;MACdD,OAAO,CAACC,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;IACzD;EACF,CAAC;EAED,oBACElB,OAAA;IAAKmB,SAAS,EAAC,iBAAiB;IAAAC,QAAA,gBAC9BpB,OAAA,CAACH,MAAM;MAAAwB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACVxB,OAAA,CAACF,OAAO;MAAAuB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACXxB,OAAA;MAAKmB,SAAS,EAAC,WAAW;MAAAC,QAAA,EACvBjB,KAAK,CAACsB,GAAG,CAACC,IAAI,iBACb1B,OAAA,CAACL,IAAI;QAAgB+B,IAAI,EAAEA,IAAK;QAACC,QAAQ,EAAEtB;MAAW,GAA3CqB,IAAI,CAACE,GAAG;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAqC,CACzD;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;AAACtB,EAAA,CA1CQD,SAAS;AAAA4B,EAAA,GAAT5B,SAAS;AA4ClB,eAAeA,SAAS;AAAC,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}