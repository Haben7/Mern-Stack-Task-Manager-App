{"ast":null,"code":"var _jsxFileName = \"/home/netsi/omishtu_joy/Day_4/taskify/frontend/src/components/inputData.jsx\",\n  _s = $RefreshSig$();\n// import React, { useState } from 'react';\n// import './inputData.css';\n\n// const InputData = ({ isOpen, onClose, onSubmit }) => {\n//   const [title, setTitle] = useState('');\n//   const [description, setDescription] = useState('');\n\n//   const handleSubmit = async () => {\n//     if (title && description) {\n//       try {\n//         const userId = localStorage.getItem('id'); \n//         const token = localStorage.getItem('token'); \n\n//         const response = await fetch('http://localhost:4000/api/v2/create-task', {\n//           method: 'POST',\n//           headers: {\n//             'Content-Type': 'application/json',\n//             'Authorization': `Bearer ${token}`, \n//             'id': userId, \n//           },\n//           body: JSON.stringify({ title, desc: description }),\n//         });\n\n//         if (!response.ok) {\n//           throw new Error('Failed to save the task');\n//         }\n\n//         const data = await response.json();\n//         onSubmit(data.task); \n//         setTitle('');\n//         setDescription('');\n//         onClose();\n//       } catch (error) {\n//         console.error('Error saving task:', error);\n//         alert('Failed to save the task');\n//       }\n//     } else {\n//       alert('Please fill in all fields');\n//     }\n//   };\n\n//   if (!isOpen) return null;\n\n//   return (\n//     <div className=\"modal-overlay\">\n//       <div className=\"modal-content\">\n//         <button className=\"close-button\" onClick={onClose}>\n//           &times;\n//         </button>\n//         <h2 id='newTask'>Add a New Task</h2>\n//         <input\n//           type=\"text\"\n//           placeholder=\"Title\"\n//           value={title}\n//           onChange={(e) => setTitle(e.target.value)}\n//           className=\"modal-input\"\n//         />\n//         <textarea\n//           placeholder=\"Description\"\n//           value={description}\n//           onChange={(e) => setDescription(e.target.value)}\n//           className=\"modal-textarea\"\n//         ></textarea>\n//         <button className=\"submit-button\" onClick={handleSubmit}>\n//           Submit\n//         </button>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default InputData;\nimport React, { useState } from 'react';\nimport './inputData.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst InputData = ({\n  isOpen,\n  onClose,\n  onSubmit\n}) => {\n  _s();\n  const [title, setTitle] = useState('');\n  const [description, setDescription] = useState('');\n  const handleSubmit = async () => {\n    if (title && description) {\n      try {\n        const userId = localStorage.getItem('id');\n        const token = localStorage.getItem('token');\n        const response = await fetch('http://localhost:4000/api/v2/create-task', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${token}`,\n            // Ensure token is included\n            'id': userId\n          },\n          body: JSON.stringify({\n            title,\n            desc: description\n          })\n        });\n\n        // Debug: Check response status and text\n        console.log('Response Status:', response.status);\n        console.log('Response Text:', await response.text());\n        if (!response.ok) {\n          throw new Error('Failed to save the task');\n        }\n        const data = await response.json();\n        onSubmit(data.task); // Pass the new task data to the parent component\n        setTitle('');\n        setDescription('');\n        onClose();\n      } catch (error) {\n        console.error('Error saving task:', error);\n        alert('Failed to save the task');\n      }\n    } else {\n      alert('Please fill in all fields');\n    }\n  };\n  if (!isOpen) return null;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"modal-overlay\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"close-button\",\n        onClick: onClose,\n        children: \"\\xD7\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        id: \"newTask\",\n        children: \"Add a New Task\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Title\",\n        value: title,\n        onChange: e => setTitle(e.target.value),\n        className: \"modal-input\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        placeholder: \"Description\",\n        value: description,\n        onChange: e => setDescription(e.target.value),\n        className: \"modal-textarea\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"submit-button\",\n        onClick: handleSubmit,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 121,\n    columnNumber: 5\n  }, this);\n};\n_s(InputData, \"1UKQWTfo2RWmkwPNsekAdQbvqFk=\");\n_c = InputData;\nexport default InputData;\nvar _c;\n$RefreshReg$(_c, \"InputData\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","InputData","isOpen","onClose","onSubmit","_s","title","setTitle","description","setDescription","handleSubmit","userId","localStorage","getItem","token","response","fetch","method","headers","body","JSON","stringify","desc","console","log","status","text","ok","Error","data","json","task","error","alert","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","id","type","placeholder","value","onChange","e","target","_c","$RefreshReg$"],"sources":["/home/netsi/omishtu_joy/Day_4/taskify/frontend/src/components/inputData.jsx"],"sourcesContent":["// import React, { useState } from 'react';\n// import './inputData.css';\n\n// const InputData = ({ isOpen, onClose, onSubmit }) => {\n//   const [title, setTitle] = useState('');\n//   const [description, setDescription] = useState('');\n\n//   const handleSubmit = async () => {\n//     if (title && description) {\n//       try {\n//         const userId = localStorage.getItem('id'); \n//         const token = localStorage.getItem('token'); \n\n//         const response = await fetch('http://localhost:4000/api/v2/create-task', {\n//           method: 'POST',\n//           headers: {\n//             'Content-Type': 'application/json',\n//             'Authorization': `Bearer ${token}`, \n//             'id': userId, \n//           },\n//           body: JSON.stringify({ title, desc: description }),\n//         });\n\n//         if (!response.ok) {\n//           throw new Error('Failed to save the task');\n//         }\n\n//         const data = await response.json();\n//         onSubmit(data.task); \n//         setTitle('');\n//         setDescription('');\n//         onClose();\n//       } catch (error) {\n//         console.error('Error saving task:', error);\n//         alert('Failed to save the task');\n//       }\n//     } else {\n//       alert('Please fill in all fields');\n//     }\n//   };\n\n//   if (!isOpen) return null;\n\n//   return (\n//     <div className=\"modal-overlay\">\n//       <div className=\"modal-content\">\n//         <button className=\"close-button\" onClick={onClose}>\n//           &times;\n//         </button>\n//         <h2 id='newTask'>Add a New Task</h2>\n//         <input\n//           type=\"text\"\n//           placeholder=\"Title\"\n//           value={title}\n//           onChange={(e) => setTitle(e.target.value)}\n//           className=\"modal-input\"\n//         />\n//         <textarea\n//           placeholder=\"Description\"\n//           value={description}\n//           onChange={(e) => setDescription(e.target.value)}\n//           className=\"modal-textarea\"\n//         ></textarea>\n//         <button className=\"submit-button\" onClick={handleSubmit}>\n//           Submit\n//         </button>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default InputData;\nimport React, { useState } from 'react';\nimport './inputData.css';\n\nconst InputData = ({ isOpen, onClose, onSubmit }) => {\n  const [title, setTitle] = useState('');\n  const [description, setDescription] = useState('');\n\n  const handleSubmit = async () => {\n    if (title && description) {\n      try {\n        const userId = localStorage.getItem('id');\n        const token = localStorage.getItem('token');\n\n        const response = await fetch('http://localhost:4000/api/v2/create-task', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${token}`, // Ensure token is included\n            'id': userId,\n          },\n          body: JSON.stringify({ title, desc: description }),\n        });\n\n        // Debug: Check response status and text\n        console.log('Response Status:', response.status);\n        console.log('Response Text:', await response.text());\n\n        if (!response.ok) {\n          throw new Error('Failed to save the task');\n        }\n\n        const data = await response.json();\n        onSubmit(data.task); // Pass the new task data to the parent component\n        setTitle('');\n        setDescription('');\n        onClose();\n      } catch (error) {\n        console.error('Error saving task:', error);\n        alert('Failed to save the task');\n      }\n    } else {\n      alert('Please fill in all fields');\n    }\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"modal-overlay\">\n      <div className=\"modal-content\">\n        <button className=\"close-button\" onClick={onClose}>\n          &times;\n        </button>\n        <h2 id='newTask'>Add a New Task</h2>\n        <input\n          type=\"text\"\n          placeholder=\"Title\"\n          value={title}\n          onChange={(e) => setTitle(e.target.value)}\n          className=\"modal-input\"\n        />\n        <textarea\n          placeholder=\"Description\"\n          value={description}\n          onChange={(e) => setDescription(e.target.value)}\n          className=\"modal-textarea\"\n        ></textarea>\n        <button className=\"submit-button\" onClick={handleSubmit}>\n          Submit\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default InputData;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}