{"ast":null,"code":"// import React, { useState, useEffect } from 'react';\n// import Header from \"./header\";\n// import Sidebar from \"./sidebar\";\n// import TaskList from \"./taskList\";\n// import axios from 'axios';\n// import InputData from './inputData';\n// function Home(){\n// //   const [tasks, setTasks] = useState([]);\n// //   const [Data, setData] = useState();\n// //   const [isModalOpen, setIsModalOpen] = useState(false);\n// //   const headers = {\n// //     id: localStorage.getItem(\"id\"),\n// //     authorization: `Bearer ${localStorage.getItem(\"token\")}`\n// //   };\n// //   // Fetch tasks from backend\n// //   useEffect(() => {\n// //     const fetch = async () => {\n// //       try {\n// //         // const userId = localStorage.getItem('id'); // Assuming the user ID is stored in localStorage\n// //         // const token = localStorage.getItem('token'); // Assuming token is stored in localStorage\n// //         const response = await axios.get('http://localhost:4000/api/v2/get-all-tasks', {\n// //           // headers: { id: userId, Authorization: `Bearer ${token}` }\n// //         });\n// //         setData(response.data.data);\n// //       } catch (error) {\n// //         console.error('Error fetching tasks:', error);\n// //       }\n// //     };\n// //     fetch();\n// //   });\n// // Data && console.log(Data.tasks);\n// //   // Add a new task by sending it to the backend\n// //   const handleAddTask = async (newTask) => {\n// //     try {\n// //       setTasks([...tasks, newTask]); // Add the new task to the state\n// //     } catch (error) {\n// //       console.error('Error adding task:', error);\n// //     }\n// //   };\n// //   // Delete a task by sending a delete request to the backend\n// //   const moveToTrash = async (taskId) => {\n// //     try {\n// //       const userId = localStorage.getItem('id');\n// //       const token = localStorage.getItem('token');\n// //       await axios.delete(`/api/v2/delete-task/${taskId}`, {\n// //         headers: { id: userId, Authorization: `Bearer ${token}` }\n// //       });\n// //       setTasks(tasks.filter(task => task._id !== taskId)); // Remove the task from state\n// //     } catch (error) {\n// //       console.error('Error deleting task:', error);\n// //     }\n// //   };\n// //   // Update the task as important by sending a put request to the backend\n// //   const toggleImportant = async (taskId) => {\n// //     try {\n// //       const response = await axios.put(`/api/v2/update-imp-task/${taskId}`, {}, {\n// //         headers: { Authorization: `Bearer ${localStorage.getItem('token')}` }\n// //       });\n// //       setTasks(tasks.map(task =>\n// //         task._id === taskId ? { ...task, important: !task.important } : task\n// //       ));\n// //     } catch (error) {\n// //       console.error('Error toggling task importance:', error);\n// //     }\n// //   };\n// //   // Update task completion status\n// //   const toggleCompletion = async (taskId) => {\n// //     try {\n// //       const response = await axios.put(`/api/v2/update-complete-task/${taskId}`, {}, {\n// //         headers: { Authorization: `Bearer ${localStorage.getItem('token')}` }\n// //       });\n// //       setTasks(tasks.map(task =>\n// //         task._id === taskId ? { ...task, completed: !task.completed } : task\n// //       ));\n// //     } catch (error) {\n// //       console.error('Error toggling task completion:', error);\n// //     }\n// //   };\n// //   const filteredTasks = tasks.filter(task => !task.trashed);\n//   return(\n//     <>\n//      <Header />\n//      <div className=\"app-body\">\n//             <Sidebar />\n//            {Data && <TaskList data = {Data.tasks}/>}\n//           </div>\n//     {/* <div className=\"task-list\">\n//       {filteredTasks.map(task => (\n//         <Task \n//           key={task._id} \n//           task={task} \n//           onMoveToTrash={moveToTrash} \n//           onToggleImportant={toggleImportant}\n//           onToggleCompletion={toggleCompletion}\n//         />\n//       ))}\n//       <button id=\"add\" className=\"task-list\" onClick={() => setIsModalOpen(true)}>\n//         <i id=\"more\" className=\"bi bi-plus-circle\"></i>\n//         <p id=\"p\">Add Task</p>\n//       </button>\n//       <InputData isOpen={isModalOpen} onClose={() => setIsModalOpen(false)} onSubmit={handleAddTask} />\n//     </div> */}\n//     </>\n//   )\n// }\n// export default Home;\nimport React from\"react\";import Header from\"./header\";import Sidebar from\"./sidebar\";import TaskList from\"./taskList\";import{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";function Home(){return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(Header,{}),/*#__PURE__*/_jsxs(\"div\",{className:\"app-body\",children:[/*#__PURE__*/_jsx(Sidebar,{}),/*#__PURE__*/_jsx(TaskList,{})]})]});}export default Home;","map":{"version":3,"names":["React","Header","Sidebar","TaskList","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","Home","children","className"],"sources":["/home/netsi/omishtu_joy/Day_4/taskify/frontend/src/components/home.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\n// import Header from \"./header\";\n// import Sidebar from \"./sidebar\";\n// import TaskList from \"./taskList\";\n// import axios from 'axios';\n// import InputData from './inputData';\n// function Home(){\n// //   const [tasks, setTasks] = useState([]);\n// //   const [Data, setData] = useState();\n// //   const [isModalOpen, setIsModalOpen] = useState(false);\n// //   const headers = {\n// //     id: localStorage.getItem(\"id\"),\n// //     authorization: `Bearer ${localStorage.getItem(\"token\")}`\n// //   };\n\n// //   // Fetch tasks from backend\n// //   useEffect(() => {\n// //     const fetch = async () => {\n// //       try {\n// //         // const userId = localStorage.getItem('id'); // Assuming the user ID is stored in localStorage\n// //         // const token = localStorage.getItem('token'); // Assuming token is stored in localStorage\n// //         const response = await axios.get('http://localhost:4000/api/v2/get-all-tasks', {\n// //           // headers: { id: userId, Authorization: `Bearer ${token}` }\n// //         });\n// //         setData(response.data.data);\n// //       } catch (error) {\n// //         console.error('Error fetching tasks:', error);\n// //       }\n// //     };\n\n// //     fetch();\n// //   });\n// // Data && console.log(Data.tasks);\n// //   // Add a new task by sending it to the backend\n// //   const handleAddTask = async (newTask) => {\n// //     try {\n// //       setTasks([...tasks, newTask]); // Add the new task to the state\n// //     } catch (error) {\n// //       console.error('Error adding task:', error);\n// //     }\n// //   };\n\n// //   // Delete a task by sending a delete request to the backend\n// //   const moveToTrash = async (taskId) => {\n// //     try {\n// //       const userId = localStorage.getItem('id');\n// //       const token = localStorage.getItem('token');\n// //       await axios.delete(`/api/v2/delete-task/${taskId}`, {\n// //         headers: { id: userId, Authorization: `Bearer ${token}` }\n// //       });\n// //       setTasks(tasks.filter(task => task._id !== taskId)); // Remove the task from state\n// //     } catch (error) {\n// //       console.error('Error deleting task:', error);\n// //     }\n// //   };\n\n// //   // Update the task as important by sending a put request to the backend\n// //   const toggleImportant = async (taskId) => {\n// //     try {\n// //       const response = await axios.put(`/api/v2/update-imp-task/${taskId}`, {}, {\n// //         headers: { Authorization: `Bearer ${localStorage.getItem('token')}` }\n// //       });\n// //       setTasks(tasks.map(task =>\n// //         task._id === taskId ? { ...task, important: !task.important } : task\n// //       ));\n// //     } catch (error) {\n// //       console.error('Error toggling task importance:', error);\n// //     }\n// //   };\n\n// //   // Update task completion status\n// //   const toggleCompletion = async (taskId) => {\n// //     try {\n// //       const response = await axios.put(`/api/v2/update-complete-task/${taskId}`, {}, {\n// //         headers: { Authorization: `Bearer ${localStorage.getItem('token')}` }\n// //       });\n// //       setTasks(tasks.map(task =>\n// //         task._id === taskId ? { ...task, completed: !task.completed } : task\n// //       ));\n// //     } catch (error) {\n// //       console.error('Error toggling task completion:', error);\n// //     }\n// //   };\n\n// //   const filteredTasks = tasks.filter(task => !task.trashed);\n//   return(\n//     <>\n//      <Header />\n//      <div className=\"app-body\">\n//             <Sidebar />\n//            {Data && <TaskList data = {Data.tasks}/>}\n//           </div>\n \n  \n  \n//     {/* <div className=\"task-list\">\n//       {filteredTasks.map(task => (\n//         <Task \n//           key={task._id} \n//           task={task} \n//           onMoveToTrash={moveToTrash} \n//           onToggleImportant={toggleImportant}\n//           onToggleCompletion={toggleCompletion}\n//         />\n//       ))}\n//       <button id=\"add\" className=\"task-list\" onClick={() => setIsModalOpen(true)}>\n//         <i id=\"more\" className=\"bi bi-plus-circle\"></i>\n//         <p id=\"p\">Add Task</p>\n//       </button>\n//       <InputData isOpen={isModalOpen} onClose={() => setIsModalOpen(false)} onSubmit={handleAddTask} />\n//     </div> */}\n  \n\n\n//     </>\n//   )\n// }\n// export default Home;\nimport React from \"react\";\nimport Header from \"./header\";\nimport Sidebar from \"./sidebar\";\nimport TaskList from \"./taskList\";\n\nfunction Home(){\n  return(\n    <>\n     <Header />\n     <div className=\"app-body\">\n            <Sidebar />\n            <TaskList />\n          </div>\n    </>\n  )\n}\nexport default Home;"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA,MAAO,CAAAA,KAAK,KAAM,OAAO,CACzB,MAAO,CAAAC,MAAM,KAAM,UAAU,CAC7B,MAAO,CAAAC,OAAO,KAAM,WAAW,CAC/B,MAAO,CAAAC,QAAQ,KAAM,YAAY,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,CAAAC,QAAA,IAAAC,SAAA,yBAElC,QAAS,CAAAC,IAAIA,CAAA,CAAE,CACb,mBACEH,KAAA,CAAAE,SAAA,EAAAE,QAAA,eACCN,IAAA,CAACJ,MAAM,GAAE,CAAC,cACVM,KAAA,QAAKK,SAAS,CAAC,UAAU,CAAAD,QAAA,eAClBN,IAAA,CAACH,OAAO,GAAE,CAAC,cACXG,IAAA,CAACF,QAAQ,GAAE,CAAC,EACT,CAAC,EACV,CAAC,CAEP,CACA,cAAe,CAAAO,IAAI","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}