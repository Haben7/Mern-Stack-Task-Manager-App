{"ast":null,"code":"var _jsxFileName = \"/home/netsi/omishtu_joy/Day_4/taskify/frontend/src/components/task.js\",\n  _s = $RefreshSig$();\n// // import React, {useState} from 'react';\n// // import './task.css';\n\n// // const Task = ({ task, onMoveToTrash }) => {\n// //   const [isToggled, setIsToggled] = useState(false);\n\n// //   const handleToggle = () => {\n// //     setIsToggled((prev) => !prev);\n// //   }\n\n// //   const [checked, setIsChecked] = useState(false)\n\n// //   const handleCheck =() => {\n// //     setIsChecked((prev) => !prev);\n\n// //   }\n// //   return (\n// //     <div className=\"task\">\n// //       <div className=\"task-content\">\n// //         <h3>{task.title}</h3>\n// //         <p>{task.description}</p>\n// //       </div>\n// //       <div className=\"task-buttons\">\n\n// //         <button onClick={handleCheck}>\n// //       {checked ? (\n// //        <h6 id='co'>Completed </h6>\n\n// //       ) : (\n// //         <h6 id='inco'>incompleted</h6>\n// //       )}</button>\n\n// //         <button><i id='icon' className=\"bi bi-pencil\"></i></button>\n\n// //         <button onClick={() => onMoveToTrash(task.id)}><i id=\"icon\" className=\"bi bi-trash\"></i></button>\n\n// //         <button onClick={handleToggle}>\n// //       {isToggled ? (\n// //        <i className=\"bi bi-star-fill\" style={{ color: 'yellow' }}></i>\n\n// //       ) : (\n// //         <i id='icon' className=\"bi bi-star\"></i>\n// //       )}\n// //     </button>  \n// //         </div>\n// //     </div>\n// //   );\n// // };\n\n// // export default Task;\n// import React, { useState } from 'react';\n// import './task.css';\n\n// const Task = ({ task, onDelete,onClose }) => {\n//   const [isEditing, setIsEditing] = useState(false);\n//   const [title, setTitle] = useState(task.title);\n//   const [description, setDescription] = useState(task.desc);\n//   const [checked, setChecked] = useState(task.complete);\n\n//   const handleEditToggle = () => {\n//     setIsEditing(!isEditing);\n//   };\n\n//   const handleEditTask = async () => {\n//     try {\n//       const token = localStorage.getItem('token');\n\n//       const response = await fetch(`http://localhost:4000/api/v2/update-task/${task._id}`, {\n//         method: 'PUT',\n//         headers: {\n//           'Content-Type': 'application/json',\n//           'Authorization': `Bearer ${token}`,\n//         },\n//         body: JSON.stringify({ title, desc: description }),\n//       });\n\n//       if (response.ok) {\n//         setIsEditing(false);\n//       } else {\n//         console.error('Failed to update the task');\n//       }\n//     } catch (error) {\n//       console.error('Error updating task:', error);\n//     }\n//   };\n\n//   const handleCheck = async () => {\n//     try {\n//       const token = localStorage.getItem('token');\n\n//       const response = await fetch(`http://localhost:4000/api/v2/update-complete-task/${task._id}`, {\n//         method: 'PUT',\n//         headers: {\n//           'Authorization': `Bearer ${token}`,\n//         },\n//       });\n\n//       if (response.ok) {\n//         setChecked(!checked);\n//       } else {\n//         console.error('Failed to update task completion');\n//       }\n//     } catch (error) {\n//       console.error('Error updating task completion:', error);\n//     }\n//   };\n\n//   return (\n//     <div className=\"task\">\n//       <div className=\"task-content\">\n//         {isEditing ? (\n//           <>\n//             {/* <input\n//               type=\"text\"\n//               value={title}\n//               onChange={(e) => setTitle(e.target.value)}\n//               className=\"task-edit-input\"\n//             />\n//             <textarea\n//               value={description}\n//               onChange={(e) => setDescription(e.target.value)}\n//               className=\"task-edit-textarea\"\n//             ></textarea>\n//             <button onClick={handleEditTask} className=\"task-save-button\">\n//               Save\n//             </button>\n//             <button onClick={handleEditToggle} className=\"task-cancel-button\">\n//               Cancel\n//             </button> */}\n//             <div className=\"modal-overlay\">\n//       <div className=\"modal-content\">\n//         <button className=\"close-button\" onClick={onClose}>\n//           &times;\n//         </button>\n//         <h2 id='newTask'>Edit Task</h2>\n//         <input\n//               type=\"text\"\n//               value={title}\n//               onChange={(e) => setTitle(e.target.value)}\n//           className=\"modal-input\"\n//         />\n//        <textarea\n//               value={description}\n//               onChange={(e) => setDescription(e.target.value)}\n//           className=\"modal-textarea\"\n//         ></textarea>\n//         <button onClick={handleEditTask} className=\"submit-button\">\n//               Save\n//             </button>\n//             <button onClick={handleEditToggle} className=\"submit-button\">\n//               Cancel\n//             </button>\n//       </div>\n//     </div>\n//           </>\n//         ) : (\n//           <>\n//             <h3>{task.title}</h3>\n//             <hr/>\n//             <p>{task.desc}</p>\n//           </>\n//         )}\n//       </div>\n//       <div className=\"task-buttons\">\n//         <button onClick={handleCheck}>\n//           {checked ? (\n//             <h6 id='co'>Completed</h6>\n//           ) : (\n//             <h6 id='inco'>Incomplete</h6>\n//           )}\n//         </button>\n\n//         <button onClick={handleEditToggle}>\n//           <i id='icon' className=\"bi bi-pencil\"></i>\n//         </button>\n\n//         <button onClick={() => onDelete(task._id)}>\n//           <i id=\"icon\" className=\"bi bi-trash\"></i>\n//         </button>\n\n//         <button onClick={async () => {\n//           try {\n//             const token = localStorage.getItem('token');\n\n//             const response = await fetch(`http://localhost:4000/api/v2/update-imp-task/${task._id}`, {\n//               method: 'PUT',\n//               headers: {\n//                 'Authorization': `Bearer ${token}`,\n//               },\n//             });\n\n//             if (response.ok) {\n//             } else {\n//               console.error('Failed to update task importance');\n//             }\n//           } catch (error) {\n//             console.error('Error updating task importance:', error);\n//           }\n//         }}>\n//           {task.important ? (\n//             <i className=\"bi bi-star-fill\" style={{ color: 'yellow' }}></i>\n//           ) : (\n//             <i id='icon' className=\"bi bi-star\"></i>\n//           )}\n//         </button>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Task;\n\nimport React, { useState } from 'react';\nimport './task.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Task = ({\n  task,\n  onDelete,\n  onUpdate\n}) => {\n  _s();\n  const [isEditing, setIsEditing] = useState(false);\n  const [title, setTitle] = useState(task.title);\n  const [description, setDescription] = useState(task.desc);\n  const [checked, setChecked] = useState(task.complete);\n  const handleEditToggle = () => {\n    setIsEditing(!isEditing);\n  };\n  const handleEditTask = async () => {\n    try {\n      const token = localStorage.getItem('token');\n      const response = await fetch(`http://localhost:4000/api/v2/update-task/${task._id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`\n        },\n        body: JSON.stringify({\n          title,\n          desc: description\n        })\n      });\n      if (response.ok) {\n        setIsEditing(false);\n        onUpdate();\n      } else {\n        console.error('Failed to update the task');\n      }\n    } catch (error) {\n      console.error('Error updating task:', error);\n    }\n  };\n  const handleTogglC = async () => {\n    try {\n      const token = localStorage.getItem('token');\n      const response = await fetch(`http://localhost:4000/api/v2/update-complete-task/${task._id}`, {\n        method: 'PUT',\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      if (response.ok) {\n        const updatedTask = await response.json();\n        setChecked(!checked);\n        onUpdate();\n      } else {\n        console.error('Failed to update task completion');\n      }\n    } catch (error) {\n      console.error('Error updating task completion:', error);\n    }\n  };\n  const handleToggleImportant = async () => {\n    try {\n      const token = localStorage.getItem('token');\n      const response = await fetch(`http://localhost:4000/api/v2/update-imp-task/${task._id}`, {\n        method: 'PUT',\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      if (response.ok) {\n        onUpdate();\n      } else {\n        console.error('Failed to update task importance');\n      }\n    } catch (error) {\n      console.error('Error updating task importance:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"task\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"task-content\",\n      children: isEditing ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"modal-overlay\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"modal-content\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"close-button\",\n              onClick: handleEditToggle,\n              children: \"\\xD7\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 307,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n              id: \"newTask\",\n              children: \"Edit Task\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 310,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              value: title,\n              onChange: e => setTitle(e.target.value),\n              className: \"modal-input\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 311,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n              value: description,\n              onChange: e => setDescription(e.target.value),\n              className: \"modal-textarea\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 317,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: handleEditTask,\n              className: \"submit-button\",\n              children: \"Save\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 322,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: handleEditToggle,\n              className: \"submit-button\",\n              children: \"Cancel\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 325,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 306,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 305,\n          columnNumber: 13\n        }, this)\n      }, void 0, false) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: task.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 333,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 334,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: task.desc\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 335,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 302,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"task-buttons\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleCheck,\n        children: checked ? /*#__PURE__*/_jsxDEV(\"h6\", {\n          id: \"co\",\n          children: \"Completed\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 342,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"h6\", {\n          id: \"inco\",\n          children: \"Incomplete\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 344,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 340,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleEditToggle,\n        children: /*#__PURE__*/_jsxDEV(\"i\", {\n          id: \"icon\",\n          className: \"bi bi-pencil\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 349,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 348,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => onDelete(task._id),\n        children: /*#__PURE__*/_jsxDEV(\"i\", {\n          id: \"icon\",\n          className: \"bi bi-trash\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 353,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 352,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleToggleImportant,\n        children: task.important ? /*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"bi bi-star-fill\",\n          style: {\n            color: 'yellow'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 358,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"i\", {\n          id: \"icon\",\n          className: \"bi bi-star\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 360,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 356,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 339,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 301,\n    columnNumber: 5\n  }, this);\n};\n_s(Task, \"JB8pRAPoYsWM+aCIKuY78plGAik=\");\n_c = Task;\nexport default Task;\nvar _c;\n$RefreshReg$(_c, \"Task\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","Task","task","onDelete","onUpdate","_s","isEditing","setIsEditing","title","setTitle","description","setDescription","desc","checked","setChecked","complete","handleEditToggle","handleEditTask","token","localStorage","getItem","response","fetch","_id","method","headers","body","JSON","stringify","ok","console","error","handleTogglC","updatedTask","json","handleToggleImportant","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","id","type","value","onChange","e","target","handleCheck","important","style","color","_c","$RefreshReg$"],"sources":["/home/netsi/omishtu_joy/Day_4/taskify/frontend/src/components/task.js"],"sourcesContent":["// // import React, {useState} from 'react';\n// // import './task.css';\n\n// // const Task = ({ task, onMoveToTrash }) => {\n// //   const [isToggled, setIsToggled] = useState(false);\n\n// //   const handleToggle = () => {\n// //     setIsToggled((prev) => !prev);\n// //   }\n\n// //   const [checked, setIsChecked] = useState(false)\n\n// //   const handleCheck =() => {\n// //     setIsChecked((prev) => !prev);\n\n// //   }\n// //   return (\n// //     <div className=\"task\">\n// //       <div className=\"task-content\">\n// //         <h3>{task.title}</h3>\n// //         <p>{task.description}</p>\n// //       </div>\n// //       <div className=\"task-buttons\">\n       \n// //         <button onClick={handleCheck}>\n// //       {checked ? (\n// //        <h6 id='co'>Completed </h6>\n\n// //       ) : (\n// //         <h6 id='inco'>incompleted</h6>\n// //       )}</button>\n\n        \n// //         <button><i id='icon' className=\"bi bi-pencil\"></i></button>\n       \n// //         <button onClick={() => onMoveToTrash(task.id)}><i id=\"icon\" className=\"bi bi-trash\"></i></button>\n\n\n// //         <button onClick={handleToggle}>\n// //       {isToggled ? (\n// //        <i className=\"bi bi-star-fill\" style={{ color: 'yellow' }}></i>\n\n// //       ) : (\n// //         <i id='icon' className=\"bi bi-star\"></i>\n// //       )}\n// //     </button>  \n// //         </div>\n// //     </div>\n// //   );\n// // };\n\n// // export default Task;\n// import React, { useState } from 'react';\n// import './task.css';\n\n// const Task = ({ task, onDelete,onClose }) => {\n//   const [isEditing, setIsEditing] = useState(false);\n//   const [title, setTitle] = useState(task.title);\n//   const [description, setDescription] = useState(task.desc);\n//   const [checked, setChecked] = useState(task.complete);\n\n//   const handleEditToggle = () => {\n//     setIsEditing(!isEditing);\n//   };\n\n//   const handleEditTask = async () => {\n//     try {\n//       const token = localStorage.getItem('token');\n\n//       const response = await fetch(`http://localhost:4000/api/v2/update-task/${task._id}`, {\n//         method: 'PUT',\n//         headers: {\n//           'Content-Type': 'application/json',\n//           'Authorization': `Bearer ${token}`,\n//         },\n//         body: JSON.stringify({ title, desc: description }),\n//       });\n\n//       if (response.ok) {\n//         setIsEditing(false);\n//       } else {\n//         console.error('Failed to update the task');\n//       }\n//     } catch (error) {\n//       console.error('Error updating task:', error);\n//     }\n//   };\n\n//   const handleCheck = async () => {\n//     try {\n//       const token = localStorage.getItem('token');\n\n//       const response = await fetch(`http://localhost:4000/api/v2/update-complete-task/${task._id}`, {\n//         method: 'PUT',\n//         headers: {\n//           'Authorization': `Bearer ${token}`,\n//         },\n//       });\n\n//       if (response.ok) {\n//         setChecked(!checked);\n//       } else {\n//         console.error('Failed to update task completion');\n//       }\n//     } catch (error) {\n//       console.error('Error updating task completion:', error);\n//     }\n//   };\n\n//   return (\n//     <div className=\"task\">\n//       <div className=\"task-content\">\n//         {isEditing ? (\n//           <>\n//             {/* <input\n//               type=\"text\"\n//               value={title}\n//               onChange={(e) => setTitle(e.target.value)}\n//               className=\"task-edit-input\"\n//             />\n//             <textarea\n//               value={description}\n//               onChange={(e) => setDescription(e.target.value)}\n//               className=\"task-edit-textarea\"\n//             ></textarea>\n//             <button onClick={handleEditTask} className=\"task-save-button\">\n//               Save\n//             </button>\n//             <button onClick={handleEditToggle} className=\"task-cancel-button\">\n//               Cancel\n//             </button> */}\n//             <div className=\"modal-overlay\">\n//       <div className=\"modal-content\">\n//         <button className=\"close-button\" onClick={onClose}>\n//           &times;\n//         </button>\n//         <h2 id='newTask'>Edit Task</h2>\n//         <input\n//               type=\"text\"\n//               value={title}\n//               onChange={(e) => setTitle(e.target.value)}\n//           className=\"modal-input\"\n//         />\n//        <textarea\n//               value={description}\n//               onChange={(e) => setDescription(e.target.value)}\n//           className=\"modal-textarea\"\n//         ></textarea>\n//         <button onClick={handleEditTask} className=\"submit-button\">\n//               Save\n//             </button>\n//             <button onClick={handleEditToggle} className=\"submit-button\">\n//               Cancel\n//             </button>\n//       </div>\n//     </div>\n//           </>\n//         ) : (\n//           <>\n//             <h3>{task.title}</h3>\n//             <hr/>\n//             <p>{task.desc}</p>\n//           </>\n//         )}\n//       </div>\n//       <div className=\"task-buttons\">\n//         <button onClick={handleCheck}>\n//           {checked ? (\n//             <h6 id='co'>Completed</h6>\n//           ) : (\n//             <h6 id='inco'>Incomplete</h6>\n//           )}\n//         </button>\n\n//         <button onClick={handleEditToggle}>\n//           <i id='icon' className=\"bi bi-pencil\"></i>\n//         </button>\n\n//         <button onClick={() => onDelete(task._id)}>\n//           <i id=\"icon\" className=\"bi bi-trash\"></i>\n//         </button>\n\n//         <button onClick={async () => {\n//           try {\n//             const token = localStorage.getItem('token');\n\n//             const response = await fetch(`http://localhost:4000/api/v2/update-imp-task/${task._id}`, {\n//               method: 'PUT',\n//               headers: {\n//                 'Authorization': `Bearer ${token}`,\n//               },\n//             });\n\n//             if (response.ok) {\n//             } else {\n//               console.error('Failed to update task importance');\n//             }\n//           } catch (error) {\n//             console.error('Error updating task importance:', error);\n//           }\n//         }}>\n//           {task.important ? (\n//             <i className=\"bi bi-star-fill\" style={{ color: 'yellow' }}></i>\n//           ) : (\n//             <i id='icon' className=\"bi bi-star\"></i>\n//           )}\n//         </button>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Task;\n\n\n\nimport React, { useState } from 'react';\nimport './task.css';\n\nconst Task = ({ task, onDelete, onUpdate }) => {\n  const [isEditing, setIsEditing] = useState(false);\n  const [title, setTitle] = useState(task.title);\n  const [description, setDescription] = useState(task.desc);\n  const [checked, setChecked] = useState(task.complete);\n\n  const handleEditToggle = () => {\n    setIsEditing(!isEditing);\n  };\n\n  const handleEditTask = async () => {\n    try {\n      const token = localStorage.getItem('token');\n\n      const response = await fetch(`http://localhost:4000/api/v2/update-task/${task._id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`,\n        },\n        body: JSON.stringify({ title, desc: description }),\n      });\n\n      if (response.ok) {\n        setIsEditing(false);\n        onUpdate();\n      } else {\n        console.error('Failed to update the task');\n      }\n    } catch (error) {\n      console.error('Error updating task:', error);\n    }\n  };\n\n  const handleTogglC = async () => {\n    try {\n      const token = localStorage.getItem('token');\n  \n      const response = await fetch(`http://localhost:4000/api/v2/update-complete-task/${task._id}`, {\n        method: 'PUT',\n        headers: {\n          'Authorization': `Bearer ${token}`,\n        },\n      });\n  \n      if (response.ok) {\n        const updatedTask = await response.json();\n        setChecked(!checked);\n        onUpdate(); \n      } else {\n        console.error('Failed to update task completion');\n      }\n    } catch (error) {\n      console.error('Error updating task completion:', error);\n    }\n  };\n  \n\n  const handleToggleImportant = async () => {\n    try {\n      const token = localStorage.getItem('token');\n\n      const response = await fetch(`http://localhost:4000/api/v2/update-imp-task/${task._id}`, {\n        method: 'PUT',\n        headers: {\n          'Authorization': `Bearer ${token}`,\n        },\n      });\n\n      if (response.ok) {\n\n        onUpdate();\n      } else {\n        console.error('Failed to update task importance');\n      }\n    } catch (error) {\n      console.error('Error updating task importance:', error);\n    }\n  };\n\n  return (\n    <div className=\"task\">\n      <div className=\"task-content\">\n        {isEditing ? (\n          <>\n            <div className=\"modal-overlay\">\n              <div className=\"modal-content\">\n                <button className=\"close-button\" onClick={handleEditToggle}>\n                  &times;\n                </button>\n                <h2 id='newTask'>Edit Task</h2>\n                <input\n                  type=\"text\"\n                  value={title}\n                  onChange={(e) => setTitle(e.target.value)}\n                  className=\"modal-input\"\n                />\n                <textarea\n                  value={description}\n                  onChange={(e) => setDescription(e.target.value)}\n                  className=\"modal-textarea\"\n                ></textarea>\n                <button onClick={handleEditTask} className=\"submit-button\">\n                  Save\n                </button>\n                <button onClick={handleEditToggle} className=\"submit-button\">\n                  Cancel\n                </button>\n              </div>\n            </div>\n          </>\n        ) : (\n          <>\n            <h3>{task.title}</h3>\n            <hr />\n            <p>{task.desc}</p>\n          </>\n        )}\n      </div>\n      <div className=\"task-buttons\">\n        <button onClick={handleCheck}>\n          {checked ? (\n            <h6 id='co'>Completed</h6>\n          ) : (\n            <h6 id='inco'>Incomplete</h6>\n          )}\n        </button>\n\n        <button onClick={handleEditToggle}>\n          <i id='icon' className=\"bi bi-pencil\"></i>\n        </button>\n\n        <button onClick={() => onDelete(task._id)}>\n          <i id=\"icon\" className=\"bi bi-trash\"></i>\n        </button>\n\n        <button onClick={handleToggleImportant}>\n          {task.important ? (\n            <i className=\"bi bi-star-fill\" style={{ color: 'yellow' }}></i>\n          ) : (\n            <i id='icon' className=\"bi bi-star\"></i>\n          )}\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default Task;\n"],"mappings":";;AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAGA;;AAEA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAO,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAEpB,MAAMC,IAAI,GAAGA,CAAC;EAAEC,IAAI;EAAEC,QAAQ;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC7C,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGX,QAAQ,CAAC,KAAK,CAAC;EA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}