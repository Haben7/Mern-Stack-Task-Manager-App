{"ast":null,"code":"var _jsxFileName = \"/home/netsi/omishtu_joy/Day_4/taskify/frontend/src/components/inputData.jsx\",\n  _s = $RefreshSig$();\n// import React, { useState } from 'react';\n// import './inputData.css';\n\n// const InputData = ({ isOpen, onClose, onSubmit }) => {\n//   const [title, setTitle] = useState('');\n//   const [description, setDescription] = useState('');\n\n//   const handleSubmit = async () => {\n//     if (title && description) {\n//       try {\n//         const userId = localStorage.getItem('id'); \n//         const token = localStorage.getItem('token'); \n\n//         const response = await fetch('http://localhost:4000/api/v2/create-task', {\n//           method: 'POST',\n//           headers: {\n//             'Content-Type': 'application/json',\n//             'Authorization': `Bearer ${token}`, \n//             'id': userId, \n//           },\n//           body: JSON.stringify({ title, desc: description }),\n//         });\n\n//         if (!response.ok) {\n//           throw new Error('Failed to save the task');\n//         }\n\n//         const data = await response.json();\n//         onSubmit(data.task); \n//         setTitle('');\n//         setDescription('');\n//         onClose();\n//       } catch (error) {\n//         console.error('Error saving task:', error);\n//         alert('Failed to save the task');\n//       }\n//     } else {\n//       alert('Please fill in all fields');\n//     }\n//   };\n\n//   if (!isOpen) return null;\n\n//   return (\n//     <div className=\"modal-overlay\">\n//       <div className=\"modal-content\">\n//         <button className=\"close-button\" onClick={onClose}>\n//           &times;\n//         </button>\n//         <h2 id='newTask'>Add a New Task</h2>\n//         <input\n//           type=\"text\"\n//           placeholder=\"Title\"\n//           value={title}\n//           onChange={(e) => setTitle(e.target.value)}\n//           className=\"modal-input\"\n//         />\n//         <textarea\n//           placeholder=\"Description\"\n//           value={description}\n//           onChange={(e) => setDescription(e.target.value)}\n//           className=\"modal-textarea\"\n//         ></textarea>\n//         <button className=\"submit-button\" onClick={handleSubmit}>\n//           Submit\n//         </button>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default InputData;\nimport React, { useState } from 'react';\nimport './inputData.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst InputData = ({\n  isOpen,\n  onClose,\n  onSubmit\n}) => {\n  _s();\n  const [title, setTitle] = useState('');\n  const [description, setDescription] = useState('');\n  const handleSubmit = async () => {\n    if (title && description) {\n      try {\n        const userId = localStorage.getItem('id'); // Ensure user ID is set\n        const token = localStorage.getItem('token'); // Ensure token is set\n\n        const response = await fetch('http://localhost:4000/api/v2/create-task', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${token}`,\n            // Corrected syntax\n            'id': userId // Ensure user ID is correctly passed in headers\n          },\n          body: JSON.stringify({\n            title,\n            desc: description\n          })\n        });\n        if (!response.ok) {\n          const errorData = await response.json();\n          throw new Error(`Failed to save the task: ${errorData.message}`);\n        }\n        const data = await response.json();\n        onSubmit(data.task); // Pass the new task data to the parent component\n        setTitle('');\n        setDescription('');\n        onClose();\n      } catch (error) {\n        console.error('Error saving task:', error);\n        alert(`Failed to save the task: ${error.message}`);\n      }\n    } else {\n      alert('Please fill in all fields');\n    }\n    if (!isOpen) return null;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal-overlay\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"close-button\",\n          onClick: onClose,\n          children: \"\\xD7\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          id: \"newTask\",\n          children: \"Add a New Task\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Title\",\n          value: title,\n          onChange: e => setTitle(e.target.value),\n          className: \"modal-input\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          placeholder: \"Description\",\n          value: description,\n          onChange: e => setDescription(e.target.value),\n          className: \"modal-textarea\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"submit-button\",\n          onClick: handleSubmit,\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 5\n    }, this);\n  };\n};\n_s(InputData, \"1UKQWTfo2RWmkwPNsekAdQbvqFk=\");\n_c = InputData;\nexport default InputData;\nvar _c;\n$RefreshReg$(_c, \"InputData\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","InputData","isOpen","onClose","onSubmit","_s","title","setTitle","description","setDescription","handleSubmit","userId","localStorage","getItem","token","response","fetch","method","headers","body","JSON","stringify","desc","ok","errorData","json","Error","message","data","task","error","console","alert","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","id","type","placeholder","value","onChange","e","target","_c","$RefreshReg$"],"sources":["/home/netsi/omishtu_joy/Day_4/taskify/frontend/src/components/inputData.jsx"],"sourcesContent":["// import React, { useState } from 'react';\n// import './inputData.css';\n\n// const InputData = ({ isOpen, onClose, onSubmit }) => {\n//   const [title, setTitle] = useState('');\n//   const [description, setDescription] = useState('');\n\n//   const handleSubmit = async () => {\n//     if (title && description) {\n//       try {\n//         const userId = localStorage.getItem('id'); \n//         const token = localStorage.getItem('token'); \n\n//         const response = await fetch('http://localhost:4000/api/v2/create-task', {\n//           method: 'POST',\n//           headers: {\n//             'Content-Type': 'application/json',\n//             'Authorization': `Bearer ${token}`, \n//             'id': userId, \n//           },\n//           body: JSON.stringify({ title, desc: description }),\n//         });\n\n//         if (!response.ok) {\n//           throw new Error('Failed to save the task');\n//         }\n\n//         const data = await response.json();\n//         onSubmit(data.task); \n//         setTitle('');\n//         setDescription('');\n//         onClose();\n//       } catch (error) {\n//         console.error('Error saving task:', error);\n//         alert('Failed to save the task');\n//       }\n//     } else {\n//       alert('Please fill in all fields');\n//     }\n//   };\n\n//   if (!isOpen) return null;\n\n//   return (\n//     <div className=\"modal-overlay\">\n//       <div className=\"modal-content\">\n//         <button className=\"close-button\" onClick={onClose}>\n//           &times;\n//         </button>\n//         <h2 id='newTask'>Add a New Task</h2>\n//         <input\n//           type=\"text\"\n//           placeholder=\"Title\"\n//           value={title}\n//           onChange={(e) => setTitle(e.target.value)}\n//           className=\"modal-input\"\n//         />\n//         <textarea\n//           placeholder=\"Description\"\n//           value={description}\n//           onChange={(e) => setDescription(e.target.value)}\n//           className=\"modal-textarea\"\n//         ></textarea>\n//         <button className=\"submit-button\" onClick={handleSubmit}>\n//           Submit\n//         </button>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default InputData;\nimport React, { useState } from 'react';\nimport './inputData.css';\n\nconst InputData = ({ isOpen, onClose, onSubmit }) => {\n  const [title, setTitle] = useState('');\n  const [description, setDescription] = useState('');\n\n  const handleSubmit = async () => {\n      if (title && description) {\n        try {\n          const userId = localStorage.getItem('id'); // Ensure user ID is set\n          const token = localStorage.getItem('token'); // Ensure token is set\n    \n          const response = await fetch('http://localhost:4000/api/v2/create-task', {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n              'Authorization': `Bearer ${token}`, // Corrected syntax\n              'id': userId, // Ensure user ID is correctly passed in headers\n            },\n            body: JSON.stringify({ title, desc: description }),\n          });\n    \n          if (!response.ok) {\n            const errorData = await response.json();\n            throw new Error(`Failed to save the task: ${errorData.message}`);\n          }\n    \n          const data = await response.json();\n          onSubmit(data.task); // Pass the new task data to the parent component\n          setTitle('');\n          setDescription('');\n          onClose();\n        } catch (error) {\n          console.error('Error saving task:', error);\n          alert(`Failed to save the task: ${error.message}`);\n        }\n      } else {\n        alert('Please fill in all fields');\n      }\n    \n    \n  if (!isOpen) return null;\n\n  return (\n    <div className=\"modal-overlay\">\n      <div className=\"modal-content\">\n        <button className=\"close-button\" onClick={onClose}>\n          &times;\n        </button>\n        <h2 id='newTask'>Add a New Task</h2>\n        <input\n          type=\"text\"\n          placeholder=\"Title\"\n          value={title}\n          onChange={(e) => setTitle(e.target.value)}\n          className=\"modal-input\"\n        />\n        <textarea\n          placeholder=\"Description\"\n          value={description}\n          onChange={(e) => setDescription(e.target.value)}\n          className=\"modal-textarea\"\n        ></textarea>\n        <button className=\"submit-button\" onClick={handleSubmit}>\n          Submit\n        </button>\n      </div>\n    </div>\n  );\n};}\n\nexport default InputData;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}