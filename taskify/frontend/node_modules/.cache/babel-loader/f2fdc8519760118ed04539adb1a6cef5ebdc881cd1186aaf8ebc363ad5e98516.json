{"ast":null,"code":"// import React, { useState } from 'react';\n// import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n// import { faCheckCircle, faTimesCircle } from '@fortawesome/free-solid-svg-icons';\n// import './task.css';\n\n// const Task = ({ task, onDelete, onUpdate }) => {\n//   const [checked, setChecked] = useState(false);\n//   const [isEditing, setIsEditing] = useState(false);\n//   const [title, setTitle] = useState(task.title);\n//   const [description, setDescription] = useState(task.desc);\n//   //const [checked, setChecked] = useState(task.complete);\n\n//   const handleEditToggle = () => {\n//     setIsEditing(!isEditing);\n//   };\n\n//   const handleEditTask = async () => {\n//     try {\n//       const token = localStorage.getItem('token');\n\n//       const response = await fetch(`http://localhost:4000/api/v2/update-task/${task._id}`, {\n//         method: 'PUT',\n//         headers: {\n//           'Content-Type': 'application/json',\n//           'Authorization': `Bearer ${token}`,\n//         },\n//         body: JSON.stringify({ title, desc: description }),\n//       });\n\n//       if (response.ok) {\n//         setIsEditing(false);\n//         onUpdate();\n//       } else {\n//         console.error('Failed to update the task');\n//       }\n//     } catch (error) {\n//       console.error('Error updating task:', error);\n//     }\n//   };\n\n//   const handleCheck = async () => {\n//     try {\n//       const token = localStorage.getItem('token');\n\n//       const response = await fetch(`http://localhost:4000/api/v2/update-complete-task/${task._id}`, {\n//         method: 'PUT',\n//         headers: {\n//           'Authorization': `Bearer ${token}`,\n//         },\n//       });\n\n//       if (response.ok) {\n//         const data = await response.json();\n\n//         setChecked(data.task.completed);\n//         onUpdate(); \n//       } else {\n//         console.error('Failed to update task completion');\n//       }\n//     } catch (error) {\n//       console.error('Error updating task completion:', error);\n//     }\n//   };\n\n//   const handleToggleImportant = async () => {\n//     try {\n//       const token = localStorage.getItem('token');\n\n//       const response = await fetch(`http://localhost:4000/api/v2/update-imp-task/${task._id}`, {\n//         method: 'PUT',\n//         headers: {\n//           'Authorization': `Bearer ${token}`,\n//         },\n//       });\n\n//       if (response.ok) {\n\n//         onUpdate();\n//       } else {\n//         console.error('Failed to update task importance');\n//       }\n//     } catch (error) {\n//       console.error('Error updating task importance:', error);\n//     }\n//   };\n\n//   return (\n//     <div className=\"task\">\n//       <div className=\"task-content\">\n//         {isEditing ? (\n//           <>\n//             <div className=\"modal-overlay\">\n//               <div className=\"modal-content\">\n//                 <button className=\"close-button\" onClick={handleEditToggle}>\n//                   &times;\n//                 </button>\n//                 <h2 id='newTask'>Edit Task</h2>\n//                 <input\n//                   type=\"text\"\n//                   value={title}\n//                   onChange={(e) => setTitle(e.target.value)}\n//                   className=\"modal-input\"\n//                 />\n//                 <textarea\n//                   value={description}\n//                   onChange={(e) => setDescription(e.target.value)}\n//                   className=\"modal-textarea\"\n//                 ></textarea>\n//                 <button onClick={handleEditTask} className=\"submit-button\">\n//                   Save\n//                 </button>\n//                 <button onClick={handleEditToggle} className=\"submit-button\">\n//                   Cancel\n//                 </button>\n//               </div>\n//             </div>\n//           </>\n//         ) : (\n//           <>\n//             <h3>{task.title}</h3>\n//             <hr />\n//             <p>{task.desc}</p>\n//           </>\n//         )}\n//       </div>\n//       <div className=\"task-buttons\">\n//       <button onClick={handleCheck} className=\"status-button\">\n//         <FontAwesomeIcon\n//           icon={checked ? faCheckCircle : faTimesCircle}\n//           className={checked ? 'icon-checked' : 'icon-unchecked'}\n//         />\n//       </button>\n\n//         <button onClick={handleEditToggle}>\n//           <i id='icon' className=\"bi bi-pencil\"></i>\n//         </button>\n\n//         <button onClick={() => onDelete(task._id)}>\n//           <i id=\"icon\" className=\"bi bi-trash\"></i>\n//         </button>\n\n//         <button onClick={handleToggleImportant}>\n//           {task.important ? (\n//             <i className=\"bi bi-star-fill\" style={{ color: 'purple' }}></i>\n//           ) : (\n//             <i id='icon' className=\"bi bi-star\"></i>\n//           )}\n//         </button>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Task;","map":{"version":3,"names":[],"sources":["/home/netsi/omishtu_joy/Day_4/taskify/frontend/src/components/task.js"],"sourcesContent":["// import React, { useState } from 'react';\n// import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n// import { faCheckCircle, faTimesCircle } from '@fortawesome/free-solid-svg-icons';\n// import './task.css';\n\n\n// const Task = ({ task, onDelete, onUpdate }) => {\n//   const [checked, setChecked] = useState(false);\n//   const [isEditing, setIsEditing] = useState(false);\n//   const [title, setTitle] = useState(task.title);\n//   const [description, setDescription] = useState(task.desc);\n//   //const [checked, setChecked] = useState(task.complete);\n\n//   const handleEditToggle = () => {\n//     setIsEditing(!isEditing);\n//   };\n\n//   const handleEditTask = async () => {\n//     try {\n//       const token = localStorage.getItem('token');\n\n//       const response = await fetch(`http://localhost:4000/api/v2/update-task/${task._id}`, {\n//         method: 'PUT',\n//         headers: {\n//           'Content-Type': 'application/json',\n//           'Authorization': `Bearer ${token}`,\n//         },\n//         body: JSON.stringify({ title, desc: description }),\n//       });\n\n//       if (response.ok) {\n//         setIsEditing(false);\n//         onUpdate();\n//       } else {\n//         console.error('Failed to update the task');\n//       }\n//     } catch (error) {\n//       console.error('Error updating task:', error);\n//     }\n//   };\n\n//   const handleCheck = async () => {\n//     try {\n//       const token = localStorage.getItem('token');\n  \n//       const response = await fetch(`http://localhost:4000/api/v2/update-complete-task/${task._id}`, {\n//         method: 'PUT',\n//         headers: {\n//           'Authorization': `Bearer ${token}`,\n//         },\n//       });\n  \n//       if (response.ok) {\n//         const data = await response.json();\n  \n//         setChecked(data.task.completed);\n//         onUpdate(); \n//       } else {\n//         console.error('Failed to update task completion');\n//       }\n//     } catch (error) {\n//       console.error('Error updating task completion:', error);\n//     }\n//   };\n  \n//   const handleToggleImportant = async () => {\n//     try {\n//       const token = localStorage.getItem('token');\n\n//       const response = await fetch(`http://localhost:4000/api/v2/update-imp-task/${task._id}`, {\n//         method: 'PUT',\n//         headers: {\n//           'Authorization': `Bearer ${token}`,\n//         },\n//       });\n\n//       if (response.ok) {\n\n//         onUpdate();\n//       } else {\n//         console.error('Failed to update task importance');\n//       }\n//     } catch (error) {\n//       console.error('Error updating task importance:', error);\n//     }\n//   };\n\n//   return (\n//     <div className=\"task\">\n//       <div className=\"task-content\">\n//         {isEditing ? (\n//           <>\n//             <div className=\"modal-overlay\">\n//               <div className=\"modal-content\">\n//                 <button className=\"close-button\" onClick={handleEditToggle}>\n//                   &times;\n//                 </button>\n//                 <h2 id='newTask'>Edit Task</h2>\n//                 <input\n//                   type=\"text\"\n//                   value={title}\n//                   onChange={(e) => setTitle(e.target.value)}\n//                   className=\"modal-input\"\n//                 />\n//                 <textarea\n//                   value={description}\n//                   onChange={(e) => setDescription(e.target.value)}\n//                   className=\"modal-textarea\"\n//                 ></textarea>\n//                 <button onClick={handleEditTask} className=\"submit-button\">\n//                   Save\n//                 </button>\n//                 <button onClick={handleEditToggle} className=\"submit-button\">\n//                   Cancel\n//                 </button>\n//               </div>\n//             </div>\n//           </>\n//         ) : (\n//           <>\n//             <h3>{task.title}</h3>\n//             <hr />\n//             <p>{task.desc}</p>\n//           </>\n//         )}\n//       </div>\n//       <div className=\"task-buttons\">\n//       <button onClick={handleCheck} className=\"status-button\">\n//         <FontAwesomeIcon\n//           icon={checked ? faCheckCircle : faTimesCircle}\n//           className={checked ? 'icon-checked' : 'icon-unchecked'}\n//         />\n//       </button>\n\n//         <button onClick={handleEditToggle}>\n//           <i id='icon' className=\"bi bi-pencil\"></i>\n//         </button>\n\n//         <button onClick={() => onDelete(task._id)}>\n//           <i id=\"icon\" className=\"bi bi-trash\"></i>\n//         </button>\n\n//         <button onClick={handleToggleImportant}>\n//           {task.important ? (\n//             <i className=\"bi bi-star-fill\" style={{ color: 'purple' }}></i>\n//           ) : (\n//             <i id='icon' className=\"bi bi-star\"></i>\n//           )}\n//         </button>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Task;\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}