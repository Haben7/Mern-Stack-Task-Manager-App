{"ast":null,"code":"// import React, { useState } from 'react';\n// import './inputData.css';\n// const InputData = ({ isOpen, onClose, onSubmit }) => {\n//   const [title, setTitle] = useState('');\n//   const [description, setDescription] = useState('');\n//   const handleSubmit = async () => {\n//     if (title && description) {\n//       try {\n//         const userId = localStorage.getItem('id'); \n//         const token = localStorage.getItem('token'); \n//         const response = await fetch('http://localhost:4000/api/v2/create-task', {\n//           method: 'POST',\n//           headers: {\n//             'Content-Type': 'application/json',\n//             'Authorization': `Bearer ${token}`, \n//             'id': userId, \n//           },\n//           body: JSON.stringify({ title, desc: description }),\n//         });\n//         if (!response.ok) {\n//           throw new Error('Failed to save the task');\n//         }\n//         const data = await response.json();\n//         onSubmit(data.task); \n//         setTitle('');\n//         setDescription('');\n//         onClose();\n//       } catch (error) {\n//         console.error('Error saving task:', error);\n//         alert('Failed to save the task');\n//       }\n//     } else {\n//       alert('Please fill in all fields');\n//     }\n//   };\n//   if (!isOpen) return null;\n//   return (\n//     <div className=\"modal-overlay\">\n//       <div className=\"modal-content\">\n//         <button className=\"close-button\" onClick={onClose}>\n//           &times;\n//         </button>\n//         <h2 id='newTask'>Add a New Task</h2>\n//         <input\n//           type=\"text\"\n//           placeholder=\"Title\"\n//           value={title}\n//           onChange={(e) => setTitle(e.target.value)}\n//           className=\"modal-input\"\n//         />\n//         <textarea\n//           placeholder=\"Description\"\n//           value={description}\n//           onChange={(e) => setDescription(e.target.value)}\n//           className=\"modal-textarea\"\n//         ></textarea>\n//         <button className=\"submit-button\" onClick={handleSubmit}>\n//           Submit\n//         </button>\n//       </div>\n//     </div>\n//   );\n// };\n// export default InputData;\nimport React,{useState}from'react';import'./inputData.css';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const InputData=_ref=>{let{isOpen,onClose,onSubmit}=_ref;const[title,setTitle]=useState('');const[description,setDescription]=useState('');const handleSubmit=async()=>{if(title&&description){try{const userId=localStorage.getItem('id');const token=localStorage.getItem('token');const response=await fetch('http://localhost:4000/api/v2/create-task',{method:'POST',headers:{'Content-Type':'application/json','Authorization':`Bearer ${token}`,'id':userId},body:JSON.stringify({title,desc:description})});// Check if the response is OK\nif(!response.ok){const errorText=await response.text();console.error('Server Response:',errorText);throw new Error(`Failed to save the task: ${errorText}`);}// Attempt to parse response as JSON\nlet data;try{data=await response.json();}catch(jsonError){console.error('Failed to parse JSON:',jsonError);throw new Error('Failed to parse server response');}onSubmit(data.task);// Pass the new task data to the parent component\nsetTitle('');setDescription('');onClose();}catch(error){console.error('Error saving task:',error);alert(`Failed to save the task: ${error.message}`);}}else{alert('Please fill in all fields');}};if(!isOpen)return null;return/*#__PURE__*/_jsx(\"div\",{className:\"modal-overlay\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"modal-content\",children:[/*#__PURE__*/_jsx(\"button\",{className:\"close-button\",onClick:onClose,children:\"\\xD7\"}),/*#__PURE__*/_jsx(\"h2\",{id:\"newTask\",children:\"Add a New Task\"}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",placeholder:\"Title\",value:title,onChange:e=>setTitle(e.target.value),className:\"modal-input\"}),/*#__PURE__*/_jsx(\"textarea\",{placeholder:\"Description\",value:description,onChange:e=>setDescription(e.target.value),className:\"modal-textarea\"}),/*#__PURE__*/_jsx(\"button\",{className:\"submit-button\",onClick:handleSubmit,children:\"Submit\"})]})});};export default InputData;","map":{"version":3,"names":["React","useState","jsx","_jsx","jsxs","_jsxs","InputData","_ref","isOpen","onClose","onSubmit","title","setTitle","description","setDescription","handleSubmit","userId","localStorage","getItem","token","response","fetch","method","headers","body","JSON","stringify","desc","ok","errorText","text","console","error","Error","data","json","jsonError","task","alert","message","className","children","onClick","id","type","placeholder","value","onChange","e","target"],"sources":["/home/netsi/omishtu_joy/Day_4/taskify/frontend/src/components/inputData.jsx"],"sourcesContent":["// import React, { useState } from 'react';\n// import './inputData.css';\n\n// const InputData = ({ isOpen, onClose, onSubmit }) => {\n//   const [title, setTitle] = useState('');\n//   const [description, setDescription] = useState('');\n\n//   const handleSubmit = async () => {\n//     if (title && description) {\n//       try {\n//         const userId = localStorage.getItem('id'); \n//         const token = localStorage.getItem('token'); \n\n//         const response = await fetch('http://localhost:4000/api/v2/create-task', {\n//           method: 'POST',\n//           headers: {\n//             'Content-Type': 'application/json',\n//             'Authorization': `Bearer ${token}`, \n//             'id': userId, \n//           },\n//           body: JSON.stringify({ title, desc: description }),\n//         });\n\n//         if (!response.ok) {\n//           throw new Error('Failed to save the task');\n//         }\n\n//         const data = await response.json();\n//         onSubmit(data.task); \n//         setTitle('');\n//         setDescription('');\n//         onClose();\n//       } catch (error) {\n//         console.error('Error saving task:', error);\n//         alert('Failed to save the task');\n//       }\n//     } else {\n//       alert('Please fill in all fields');\n//     }\n//   };\n\n//   if (!isOpen) return null;\n\n//   return (\n//     <div className=\"modal-overlay\">\n//       <div className=\"modal-content\">\n//         <button className=\"close-button\" onClick={onClose}>\n//           &times;\n//         </button>\n//         <h2 id='newTask'>Add a New Task</h2>\n//         <input\n//           type=\"text\"\n//           placeholder=\"Title\"\n//           value={title}\n//           onChange={(e) => setTitle(e.target.value)}\n//           className=\"modal-input\"\n//         />\n//         <textarea\n//           placeholder=\"Description\"\n//           value={description}\n//           onChange={(e) => setDescription(e.target.value)}\n//           className=\"modal-textarea\"\n//         ></textarea>\n//         <button className=\"submit-button\" onClick={handleSubmit}>\n//           Submit\n//         </button>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default InputData;\nimport React, { useState } from 'react';\nimport './inputData.css';\n\nconst InputData = ({ isOpen, onClose, onSubmit }) => {\n  const [title, setTitle] = useState('');\n  const [description, setDescription] = useState('');\n\n  const handleSubmit = async () => {\n    if (title && description) {\n      try {\n        const userId = localStorage.getItem('id');\n        const token = localStorage.getItem('token');\n\n        const response = await fetch('http://localhost:4000/api/v2/create-task', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${token}`,\n            'id': userId,\n          },\n          body: JSON.stringify({ title, desc: description }),\n        });\n\n        // Check if the response is OK\n        if (!response.ok) {\n          const errorText = await response.text();\n          console.error('Server Response:', errorText);\n          throw new Error(`Failed to save the task: ${errorText}`);\n        }\n\n        // Attempt to parse response as JSON\n        let data;\n        try {\n          data = await response.json();\n        } catch (jsonError) {\n          console.error('Failed to parse JSON:', jsonError);\n          throw new Error('Failed to parse server response');\n        }\n\n        onSubmit(data.task); // Pass the new task data to the parent component\n        setTitle('');\n        setDescription('');\n        onClose();\n      } catch (error) {\n        console.error('Error saving task:', error);\n        alert(`Failed to save the task: ${error.message}`);\n      }\n    } else {\n      alert('Please fill in all fields');\n    }\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"modal-overlay\">\n      <div className=\"modal-content\">\n        <button className=\"close-button\" onClick={onClose}>\n          &times;\n        </button>\n        <h2 id='newTask'>Add a New Task</h2>\n        <input\n          type=\"text\"\n          placeholder=\"Title\"\n          value={title}\n          onChange={(e) => setTitle(e.target.value)}\n          className=\"modal-input\"\n        />\n        <textarea\n          placeholder=\"Description\"\n          value={description}\n          onChange={(e) => setDescription(e.target.value)}\n          className=\"modal-textarea\"\n        ></textarea>\n        <button className=\"submit-button\" onClick={handleSubmit}>\n          Submit\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default InputData;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}